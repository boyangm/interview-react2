{"ast":null,"code":"import _objectSpread from \"/Users/boyangmatsapola/Desktop/workshops/interview-react2/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/boyangmatsapola/Desktop/workshops/interview-react2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/boyangmatsapola/Desktop/workshops/interview-react2/src/components/appstate.js\";\nimport React, { useState, useEffect } from 'react'; //exported WebState to be used with Context Hooks\n\nexport const WebState = React.createContext(); //Holds the state of our App to pass data to diff components\n\nexport const Provider = props => {\n  //Hooks\n  const _useState = useState(JSON.parse(sessionStorage.getItem('Activity')) || []),\n        _useState2 = _slicedToArray(_useState, 2),\n        activities = _useState2[0],\n        setActivities = _useState2[1];\n\n  const _useState3 = useState(new Date()),\n        _useState4 = _slicedToArray(_useState3, 2),\n        currentTime = _useState4[0],\n        setCurrentTime = _useState4[1]; //stores an Activity Entry\n\n\n  const newActivity = (title, description) => {\n    const today = new Date();\n    let hours = today.getHours();\n\n    if (hours < 10) {\n      hours = `0${hours.toString()}`;\n    }\n\n    let minutes = today.getMinutes();\n\n    if (minutes < 10) {\n      minutes = `0${minutes.toString()}`;\n    }\n\n    let seconds = today.getSeconds();\n\n    if (seconds < 10) {\n      seconds = `0${seconds.toString()}`;\n    }\n\n    const time = hours + \":\" + minutes + \":\" + seconds;\n    const item = {\n      time,\n      today,\n      title,\n      description\n    };\n    setActivities(prevState => {\n      sessionStorage.setItem('Activity', JSON.stringify([...prevState, item]));\n      return [...prevState, item];\n    });\n  }; //Adds an End time to Activity\n\n\n  const handleEnd = (key, time) => {\n    setActivities(prevState => {\n      const endDate = new Date(time);\n      let hours = endDate.getHours();\n\n      if (hours < 10) {\n        hours = `0${hours.toString()}`;\n      }\n\n      let minutes = endDate.getMinutes();\n\n      if (minutes < 10) {\n        minutes = `0${minutes.toString()}`;\n      }\n\n      let seconds = endDate.getSeconds();\n\n      if (seconds < 10) {\n        seconds = `0${seconds.toString()}`;\n      }\n\n      const endTime = hours + \":\" + minutes + \":\" + seconds;\n\n      const entry = _objectSpread({}, prevState[key], {\n        endTime,\n        endDate\n      });\n\n      const filteredArr = prevState.filter(activity => activity !== prevState[key]);\n      sessionStorage.removeItem('Activity');\n      sessionStorage.setItem('Activity', JSON.stringify([...filteredArr, entry]));\n      return [...filteredArr, entry];\n    });\n  }; //calculates the duration of the Activity\n\n\n  const handleTimeState = (starttime, endTime = currentTime) => {\n    const time1 = new Date(starttime);\n    const time2 = new Date(endTime);\n    let seconds = Math.floor((time2 - time1) / 1000) || 0;\n    let minutes = Math.floor(seconds / 60) || 0;\n\n    if (minutes < 10) {\n      minutes = `0${minutes.toString()}`;\n    }\n\n    let hours = Math.floor(minutes / 60) || 0;\n\n    if (hours < 10) {\n      hours = `0${hours.toString()}`;\n    }\n\n    let remainderSeconds = seconds % 60;\n\n    if (remainderSeconds < 10) {\n      remainderSeconds = `0${remainderSeconds.toString()}`;\n    }\n\n    return `${hours}:${minutes}:${remainderSeconds}`;\n  }; //gets the Dates to calculate duration\n\n\n  const duration = item => {\n    const today = item.today;\n    const startDate = new Date(today);\n    const endDate = new Date(item.endDate);\n\n    if (item.endTime) {\n      return handleTimeState(startDate, endDate);\n    } else {\n      return handleTimeState(today);\n    }\n  }; //Auto updates the Date for State\n\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return React.createElement(WebState.Provider, {\n    value: {\n      newActivity,\n      activities,\n      handleEnd,\n      currentTime,\n      handleTimeState,\n      duration\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, props.children);\n};","map":{"version":3,"sources":["/Users/boyangmatsapola/Desktop/workshops/interview-react2/src/components/appstate.js"],"names":["React","useState","useEffect","WebState","createContext","Provider","props","JSON","parse","sessionStorage","getItem","activities","setActivities","Date","currentTime","setCurrentTime","newActivity","title","description","today","hours","getHours","toString","minutes","getMinutes","seconds","getSeconds","time","item","prevState","setItem","stringify","handleEnd","key","endDate","endTime","entry","filteredArr","filter","activity","removeItem","handleTimeState","starttime","time1","time2","Math","floor","remainderSeconds","duration","startDate","interval","setInterval","clearInterval","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\n//exported WebState to be used with Context Hooks\nexport const WebState = React.createContext()\n\n//Holds the state of our App to pass data to diff components\nexport const Provider = (props) => {\n    //Hooks\n    const [activities, setActivities] = useState(JSON.parse(sessionStorage.getItem('Activity')) || [])\n    const [currentTime, setCurrentTime] = useState(new Date())\n\n    //stores an Activity Entry\n    const newActivity = (title, description) => {\n        const today = new Date();\n        let hours = today.getHours()\n        if (hours < 10) {\n            hours = `0${hours.toString()}`\n        }\n        let minutes = today.getMinutes()\n        if (minutes < 10) {\n            minutes = `0${minutes.toString()}`\n        }\n        let seconds = today.getSeconds()\n        if (seconds < 10) {\n            seconds = `0${seconds.toString()}`\n        }\n        const time = hours + \":\" + minutes + \":\" + seconds;\n        const item = {\n            time,\n            today,\n            title,\n            description\n\n        }\n        setActivities((prevState) => {\n            sessionStorage.setItem('Activity', JSON.stringify([...prevState, item]))\n            return [...prevState, item]\n\n\n        })\n\n    }\n    //Adds an End time to Activity\n    const handleEnd = (key, time) => {\n        setActivities(prevState => {\n            const endDate = new Date(time)\n            let hours = endDate.getHours()\n            if (hours < 10) {\n                hours = `0${hours.toString()}`\n            }\n            let minutes = endDate.getMinutes()\n            if (minutes < 10) {\n                minutes = `0${minutes.toString()}`\n            }\n            let seconds = endDate.getSeconds()\n            if (seconds < 10) {\n                seconds = `0${seconds.toString()}`\n            }\n            const endTime = hours + \":\" + minutes + \":\" + seconds;\n            const entry = { ...prevState[key], endTime, endDate }\n            const filteredArr = prevState.filter(activity => activity !== prevState[key])\n            sessionStorage.removeItem('Activity');\n            sessionStorage.setItem('Activity', JSON.stringify([...filteredArr, entry]))\n            return [...filteredArr, entry]\n\n\n        })\n    }\n\n    //calculates the duration of the Activity\n    const handleTimeState = (starttime, endTime = currentTime) => {\n        const time1 = new Date(starttime)\n        const time2 = new Date(endTime)\n        let seconds = Math.floor((time2 - time1) / 1000) || 0;\n        let minutes = Math.floor(seconds / 60) || 0\n        if (minutes < 10) {\n            minutes = `0${minutes.toString()}`\n        }\n        let hours = Math.floor(minutes / 60) || 0\n        if (hours < 10) {\n            hours = `0${hours.toString()}`\n        }\n        let remainderSeconds = seconds % 60\n        if (remainderSeconds < 10) {\n            remainderSeconds = `0${remainderSeconds.toString()}`\n        }\n        return `${hours}:${minutes}:${remainderSeconds}`\n\n    }\n\n    //gets the Dates to calculate duration\n    const duration = (item) => {\n        const { today } = item\n        const startDate = new Date(today)\n        const endDate = new Date(item.endDate)\n\n        if (item.endTime) {\n            return handleTimeState(startDate, endDate)\n        } else {\n\n            return handleTimeState(today);\n        }\n\n\n    }\n    //Auto updates the Date for State\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setCurrentTime(new Date())\n        }, 1000);\n        return () => clearInterval(interval);\n    }, []);\n\n    return (\n        <WebState.Provider value={{\n            newActivity,\n            activities,\n            handleEnd,\n            currentTime,\n            handleTimeState,\n            duration\n        }}>\n\n            {props.children}\n        </WebState.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}