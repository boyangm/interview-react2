{"version":3,"sources":["components/appstate.js","components/Panel1.js","components/Panel2.js","components/home.js","components/NavBar.js","components/Panel3.js","components/StopPanel.js","App.js","serviceWorker.js","index.js"],"names":["WebState","React","createContext","Panel1","newActivity","useContext","useState","description","setDescription","message","setMessage","title","setTitle","className","value","onChange","e","target","type","onClick","event","preventDefault","Panel2","props","context","activities","duration","handleEnd","currentTime","handleTimeState","map","activity","key","indexOf","time","endTime","Home","NavBar","match","to","Panel3","options","setOptions","useEffect","length","console","log","StopPanel","App","basename","exact","path","render","component","Boolean","window","location","hostname","ReactDOM","JSON","parse","sessionStorage","getItem","setActivities","Date","setCurrentTime","starttime","time1","time2","seconds","Math","floor","minutes","toString","hours","remainderSeconds","interval","setInterval","clearInterval","Provider","today","getHours","getMinutes","getSeconds","item","prevState","setItem","stringify","endDate","entry","filteredArr","filter","removeItem","startDate","children","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fdff4415.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\n//exported WebState to be used with Context Hooks\nexport const WebState = React.createContext()\n\n//Holds the state of our App to pass data to diff components\nexport const Provider = (props) => {\n    //Hooks\n    const [activities, setActivities] = useState(JSON.parse(sessionStorage.getItem('Activity')) || [])\n    const [currentTime, setCurrentTime] = useState(new Date())\n\n    //stores an Activity Entry\n    const newActivity = (title, description) => {\n        const today = new Date();\n        let hours = today.getHours()\n        if (hours < 10) {\n            hours = `0${hours.toString()}`\n        }\n        let minutes = today.getMinutes()\n        if (minutes < 10) {\n            minutes = `0${minutes.toString()}`\n        }\n        let seconds = today.getSeconds()\n        if (seconds < 10) {\n            seconds = `0${seconds.toString()}`\n        }\n        const time = hours + \":\" + minutes + \":\" + seconds;\n        const item = {\n            time,\n            today,\n            title,\n            description\n\n        }\n        setActivities((prevState) => {\n            sessionStorage.setItem('Activity', JSON.stringify([...prevState, item]))\n            return [...prevState, item]\n\n\n        })\n\n    }\n    //Adds an End time to Activity\n    const handleEnd = (key, time) => {\n        setActivities(prevState => {\n            const endDate = new Date(time)\n            let hours = endDate.getHours()\n            if (hours < 10) {\n                hours = `0${hours.toString()}`\n            }\n            let minutes = endDate.getMinutes()\n            if (minutes < 10) {\n                minutes = `0${minutes.toString()}`\n            }\n            let seconds = endDate.getSeconds()\n            if (seconds < 10) {\n                seconds = `0${seconds.toString()}`\n            }\n            const endTime = hours + \":\" + minutes + \":\" + seconds;\n            const entry = { ...prevState[key], endTime, endDate }\n            const filteredArr = prevState.filter(activity => activity !== prevState[key])\n            sessionStorage.removeItem('Activity');\n            sessionStorage.setItem('Activity', JSON.stringify([...filteredArr, entry]))\n            return [...filteredArr, entry]\n\n\n        })\n    }\n\n    //calculates the duration of the Activity\n    const handleTimeState = (starttime, endTime = currentTime) => {\n        const time1 = new Date(starttime)\n        const time2 = new Date(endTime)\n        let seconds = Math.floor((time2 - time1) / 1000) || 0;\n        let minutes = Math.floor(seconds / 60) || 0\n        if (minutes < 10) {\n            minutes = `0${minutes.toString()}`\n        }\n        let hours = Math.floor(minutes / 60) || 0\n        if (hours < 10) {\n            hours = `0${hours.toString()}`\n        }\n        let remainderSeconds = seconds % 60\n        if (remainderSeconds < 10) {\n            remainderSeconds = `0${remainderSeconds.toString()}`\n        }\n        return `${hours}:${minutes}:${remainderSeconds}`\n\n    }\n\n    //gets the Dates to calculate duration\n    const duration = (item) => {\n        const { today } = item\n        const startDate = new Date(today)\n        const endDate = new Date(item.endDate)\n\n        if (item.endTime) {\n            return handleTimeState(startDate, endDate)\n        } else {\n\n            return handleTimeState(today);\n        }\n\n\n    }\n    //Auto updates the Date for State\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setCurrentTime(new Date())\n        }, 1000);\n        return () => clearInterval(interval);\n    }, []);\n\n    return (\n        <WebState.Provider value={{\n            newActivity,\n            activities,\n            handleEnd,\n            currentTime,\n            handleTimeState,\n            duration\n        }}>\n\n            {props.children}\n        </WebState.Provider>\n    )\n}","import React, { useState, useContext } from 'react'\nimport { WebState } from './appstate'\n\n// Panel for Starting Acivity\nconst Panel1 = () => {\n    //sets up context from Webstate\n    const context = useContext(WebState)\n    const {newActivity} = context\n    \n    //Hooks\n    const [description, setDescription] = useState('')\n    const [message, setMessage] = useState('')\n    const [title, setTitle] = useState('')\n\n    //handles Sending local state back to WebState to add Activity Entry\n    //Also resets state (LOCAL)\n    const handleSubmit = (event) =>{\n        event.preventDefault()\n        if(description !== '' && title !== ''){\n            newActivity(title, description)\n            setDescription('')\n            setTitle('')\n            setMessage('')\n\n        }else{\n            //Validation\n            setMessage('Please Fill Out All Fields')\n        }\n    }\n\n    //handles Description State Change (LOCAL)\n    const handleChange = (e) => {\n        setDescription(e.target.value)\n\n    }\n\n    //handles Tile State Change (LOCAL)\n    const handleTitleChange = (e) => {\n        setTitle(e.target.value)\n\n    }\n\n    return (\n        <div className = 'panel1Cont'>\n            <form className = 'panel1'>\n                <label className=\"err\">{message}</label>\n                <label className=\"formelem\">Title</label>\n                <input className=\"formelem\" value ={title} onChange = {handleTitleChange}type='text'></input>\n                <label className=\"formelem\">Activity Description</label>\n                <input className=\"formelem\" value ={description} onChange = {handleChange}type='text'></input>\n                <button onClick ={handleSubmit} >Start Activity</button>\n            </form>\n        </div>\n    )\n}\n\nexport default Panel1\n","import React, { useState, useEffect, useContext } from 'react'\nimport { WebState } from './appstate'\n\n// Activity Grid Component\nconst Panel2 = (props) => {\n    //sets up context from Webstate\n    const context = useContext(WebState)\n    const { activities, handleEnd, currentTime, duration, handleTimeState } = context\n\n    return (\n        <div className='activityCont'>\n            <h3>Activity Table</h3>\n            <table >\n                <thead>\n                    <tr>\n                        <th>Start Time</th>\n                        <th>End Time</th>\n                        <th>Duration</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        activities.map(activity => (\n                            <tr key={activities.indexOf(activity)}>\n                                <td>\n                                    {activity.time}\n                                </td>\n                                <td>\n                                    {activity.endTime || ''}\n                                </td>\n                                <td>\n                                    {duration(activity)}\n                                </td>\n                                <td>\n                                    {activity.description}\n                                </td>\n\n                            </tr>\n\n                        ))\n                    }\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default Panel2\n","import React from 'react'\nimport Panel1 from './Panel1'\nimport Panel2 from './Panel2'\n\n//our home Page\nconst Home = (props) => {\n\n    return (\n        <div className='homeCont'>\n            <h1 className='title'>Time Keeper</h1>\n            <h3 className='title'>Enter Activity Below & Start Activity</h3>\n            <Panel1 ></Panel1>\n\n\n        </div>\n    )\n}\n\n\nexport default Home\n\n\n\n\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\n//our NavBar\nconst NavBar = (props) => {\n    const {match} = props;\n    return (\n        <div className='navBar'>\n            <NavLink className='Links' to='/home/start'>Start Activity</NavLink>\n            <NavLink className='Links' to='/home/stop'>Stop Activity</NavLink>\n            <NavLink className='Links' to='/activity'>Stats</NavLink>\n        </div>\n    )\n}\n\nexport default NavBar\n","import React, { useState, useContext , useEffect } from 'react'\nimport { WebState } from './appstate'\n\n//Panel for stopping Activity\nconst Panel3 = () => {\n    //sets up context from Webstate\n    const context = useContext(WebState);\n    const { activities, handleEnd, currentTime } = context;\n\n    //Hooks\n\n    const [options, setOptions] = useState(0)\n    const [description, setDescription] = useState('')\n    //handles state of Select/Option (LOCAL)\n    const handleChange = (event) => {\n        const { value } = event.target\n        setOptions(value)\n        console.log(value)\n        setDescription(activities[value].description)\n\n    }\n\n    useEffect(() =>{\n        if(activities.length < 1){\n            setDescription('')\n        }else{\n            setDescription(activities[0].description) \n        }\n    })\n    //sends index of activity and endTime back to Webstate\n    const endActivity = (event, key) => {\n        event.preventDefault()\n\n        handleEnd(key, currentTime)\n    }\n    return (\n        <div className=\"panel3Cont\">\n            <div className=\"panel3\">\n                <label className=\"formelem\">Title:</label>\n                <select className=\"formelem\" value={options} onChange={handleChange}>\n                    {\n                        activities.map(activity => (\n                            <option key={activities.indexOf(activity)} value={activities.indexOf(activity)}>{activity.title}</option>\n\n                        ))\n                    }\n\n                </select>\n\n                <label className=\"formelem\">Description:</label>\n                <p>{description}</p>\n                <button onClick={(e) => endActivity(e, options)}>End Activity</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Panel3\n","import React from 'react'\nimport Panel3 from './Panel3'\n\n//landing page for stopping Activity\nconst StopPanel = () => {\n\n    return (\n        <div className='stopPanelCont'>\n            <h1 className='title'>Time Keeper</h1>\n            <h3 className='title'>Check Duration of Activity and Stop It</h3>\n            <Panel3 ></Panel3>\n\n\n\n        </div>\n    )\n}\n\n\nexport default StopPanel\n\n\n\n\n","import React from 'react';\nimport {HashRouter, Redirect, Switch, Route} from 'react-router-dom'\nimport Home from './components/home'\nimport './styles/styles.scss'\nimport Panel2 from './components/Panel2';\nimport NavBar from './components/NavBar'\nimport StopPanel from './components/StopPanel';\nconst App = (props)  =>{\n  return (\n\n   <HashRouter basename = '/'>\n   <Switch>\n     <Route exact path ='/' render ={(props)=> <Redirect {...props} to ='/home/start'/>} />\n     <Route exact path ='/home/start' component = {Home}/>\n     <Route exact path ='/activity' component = {Panel2}/>\n     <Route path ='/home/stop' component = {StopPanel}/>\n   </Switch>\n    <NavBar></NavBar>\n   </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from './components/appstate'\n\nReactDOM.render(\n<Provider>\n<App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}